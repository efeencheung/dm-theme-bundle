{% extends 'knp_menu.html.twig' %}

{% macro attributes(attributes) %}
{% for name, value in attributes %}
    {%- if value is not none and value is not same as(false) -%}
        {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
    {%- endif -%}
{%- endfor -%}
{% endmacro %}

{% block label %}              
{% if item.getExtra('icon') %} 
<i class="{{ item.getExtra('icon') }}"></i> 
{% endif %}
<span class="title">
    {% if options.allow_safe_labels and item.getExtra('safe_label', false) %}
    {{ item.label|raw }}{% else %}{{ item.label }}
    {% endif %}
</span>
{%- if matcher.isCurrent(item) %}
<span class="selected"></span>
{%- endif -%}
{% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren and not matcher.isAncestor(item, options.matchingDepth) %}
<span class="arrow"></span>
{% elseif item.hasChildren and matcher.isAncestor(item, options.matchingDepth) %}
<span class="selected"></span>
<span class="arrow open"></span>
{% endif %}
{% endblock %}

{% block item %}
{% if item.displayed %}
{# building the class of the item #}
    {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
    {%- set classes = classes|merge(['nav-item']) %}
    {%- if matcher.isCurrent(item) %}
        {%- set classes = classes|merge([options.currentClass]) %}
    {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
        {%- set classes = classes|merge([options.ancestorClass]) %}
    {%- endif %}
    {%- if item.actsLikeFirst %}
        {%- set classes = classes|merge([options.firstClass]) %}
    {%- endif %}
    {%- if item.actsLikeLast %}
        {%- set classes = classes|merge([options.lastClass]) %}
    {%- endif %}

    {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
    {% if item.hasChildren and options.depth is not same as(0) %}
        {% if options.branch_class is not empty and item.displayChildren %}
            {%- set classes = classes|merge([options.branch_class]) %}
        {% endif %}
    {% elseif options.leaf_class is not empty %}
        {%- set classes = classes|merge([options.leaf_class]) %}
    {%- endif %}

    {%- set attributes = item.attributes %}
    {%- if classes is not empty %}
        {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {%- endif %}
{# displaying the item #}
    {% import _self as knp_menu %}
    <li{{ knp_menu.attributes(attributes) }}>
        {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
        {{ block('linkElement') }}
        {%- else %}
        {{ block('spanElement') }}
        {%- endif %}
{# render the list of children#}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['sub-menu menu_level_' ~ item.level]) %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
        {{ block('list') }}
    </li>
{% endif %}
{% endblock %}

{% block linkElement %}
{% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}
{% set linkAttributes = item.linkAttributes|merge({'class': 'nav-link nav-toggle ' }) %}
{% else %}
{% set linkAttributes = item.linkAttributes|merge({'class': 'nav-link nav-toggle ' }) %}
{% endif %}
<a href="{{ item.uri }}"{{ knp_menu.attributes(linkAttributes) }}>{{ block('label') }}</a>
{% endblock %}
